//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Dispatch
import Foundation
import SwiftGRPC
import SwiftProtobuf

public protocol Nowaproto_NowaGetRestaurantCall: ClientCallUnary {}

fileprivate final class Nowaproto_NowaGetRestaurantCallBase: ClientCallUnaryBase<Nowaproto_GetRestaurantRequest, Nowaproto_GetRestaurantResponse>, Nowaproto_NowaGetRestaurantCall {
  override class var method: String { return "/nowaproto.Nowa/GetRestaurant" }
}


/// Instantiate Nowaproto_NowaServiceClient, then call methods of this protocol to make API calls.
public protocol Nowaproto_NowaService: ServiceClient {
  /// Synchronous. Unary.
  func getRestaurant(_ request: Nowaproto_GetRestaurantRequest, metadata customMetadata: Metadata) throws -> Nowaproto_GetRestaurantResponse
  /// Asynchronous. Unary.
  @discardableResult
  func getRestaurant(_ request: Nowaproto_GetRestaurantRequest, metadata customMetadata: Metadata, completion: @escaping (Nowaproto_GetRestaurantResponse?, CallResult) -> Void) throws -> Nowaproto_NowaGetRestaurantCall

}

public extension Nowaproto_NowaService {
  /// Synchronous. Unary.
  func getRestaurant(_ request: Nowaproto_GetRestaurantRequest) throws -> Nowaproto_GetRestaurantResponse {
    return try self.getRestaurant(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func getRestaurant(_ request: Nowaproto_GetRestaurantRequest, completion: @escaping (Nowaproto_GetRestaurantResponse?, CallResult) -> Void) throws -> Nowaproto_NowaGetRestaurantCall {
    return try self.getRestaurant(request, metadata: self.metadata, completion: completion)
  }

}

public final class Nowaproto_NowaServiceClient: ServiceClientBase, Nowaproto_NowaService {
  /// Synchronous. Unary.
  public func getRestaurant(_ request: Nowaproto_GetRestaurantRequest, metadata customMetadata: Metadata) throws -> Nowaproto_GetRestaurantResponse {
    return try Nowaproto_NowaGetRestaurantCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  public func getRestaurant(_ request: Nowaproto_GetRestaurantRequest, metadata customMetadata: Metadata, completion: @escaping (Nowaproto_GetRestaurantResponse?, CallResult) -> Void) throws -> Nowaproto_NowaGetRestaurantCall {
    return try Nowaproto_NowaGetRestaurantCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
public protocol Nowaproto_NowaProvider: ServiceProvider {
  func getRestaurant(request: Nowaproto_GetRestaurantRequest, session: Nowaproto_NowaGetRestaurantSession) throws -> Nowaproto_GetRestaurantResponse
}

extension Nowaproto_NowaProvider {
  public var serviceName: String { return "nowaproto.Nowa" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  public func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/nowaproto.Nowa/GetRestaurant":
      return try Nowaproto_NowaGetRestaurantSessionBase(
        handler: handler,
        providerBlock: { try self.getRestaurant(request: $0, session: $1 as! Nowaproto_NowaGetRestaurantSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

public protocol Nowaproto_NowaGetRestaurantSession: ServerSessionUnary {}

fileprivate final class Nowaproto_NowaGetRestaurantSessionBase: ServerSessionUnaryBase<Nowaproto_GetRestaurantRequest, Nowaproto_GetRestaurantResponse>, Nowaproto_NowaGetRestaurantSession {}

